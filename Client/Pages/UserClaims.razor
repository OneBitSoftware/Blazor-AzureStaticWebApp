

<AuthorizeView>
    <h4>
        @context.User.Identity?.Name has successfully signed-in
    </h4>
    <table class="table">
        <thead>
            <tr>
                <th>Claim Type</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var claim in _claims)
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
        </tbody>
    </table>
</AuthorizeView>

@code {
    @using System.Security.Claims;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    protected string _authenticationMessage = string.Empty;

    protected IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private string[] printClaims = { "name", "idp", "oid", "jobTitle", "emails" };

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
    }

    /// <summary>
    /// Retrieves user claims for the signed-in user.
    /// </summary>
    /// <returns></returns>
    private async Task GetClaimsPrincipalData()
    {
        // Gets an AuthenticationState that describes the current user.
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authenticationState.User;

        // Checks if the user has been authenticated.
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            _authenticationMessage = $"{user.Identity.Name} is authenticated.";

            _claims = user.Claims;
        }
        else
        {
            _authenticationMessage = "The user is NOT authenticated.";
        }
    }
}
